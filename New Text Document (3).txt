def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star_search(grid, start, goal):
    open_set = [start]
    came_from = {}
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}

    while open_set:
        current = open_set[0]
        for node in open_set:
            if f_score.get(node, float('inf')) < f_score.get(current, float('inf')):
                current = node

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        open_set.remove(current)

        x, y = current
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            neighbor = (x + dx, y + dy)
            
            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]):
                tentative_g_score = g_score[current] + 1

                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                    if neighbor not in open_set:
                        open_set.append(neighbor)

    return None

grid = [[0 for _ in range(10)] for _ in range(10)]
start = (0, 0)
goal = (8, 6)

path = a_star_search(grid, start, goal)

if path:
    print("Path found:")
    print(path)
else:
    print("No path found.")




-------------------------------------------------------------------------------------------
graph = {
    'A': {'B': 10, 'C': 6, 'D': 3},
    'B': {'E': 5, 'F': 3},
    'C': {'G': 3, 'H': 4},
    'D': {'H': 5},
    'E': {},
    'F': {},
    'G': {},
    'H': {}
}

graph2 = {
    'A': {'B': 20, 'D': 30},
    'B': {'A': 20, 'C': 25, 'D': 70},
    'D': {'A': 30, 'B': 70, 'F': 15, 'G': 20, 'E': 35},
    'C': {'B': 25, 'E': 40},
    'E': {'D': 35, 'C': 40, 'G': 50, 'H': 70},
    'F': {'D': 15, 'G': 10},
    'G': {'F': 10, 'D': 20, 'E': 50, 'H': 60},
    'H': {'E': 70, 'G': 60}
}

# Heuristic Definitions
Heuristic = {'A': 8, 'B': 8, 'C': 2, 'D': 7, 'E': 3, 'F': 6, 'G': 0, 'H': 3}
Heuristic2 = {'A': 90, 'B': 95, 'C': 88, 'D': 77, 'E': 50, 'F': 55, 'G': 50, 'H': 0}


def A_star(graph, start, goal, h):
    parent = dict()
    frontier = {start:h[start]}
    visited = {start:h[start]}
    while frontier:
        sorted_queue = sorted(frontier, key=frontier.get) #sorted_queue is a list
        node = sorted_queue[0]
        g = frontier.pop(node)-h[node]
        if node == goal:
            return parent
        for n in graph.get(node):
            if n not in visited:
                F = h[n] + graph[node][n]+g
                visited[n] = F
                frontier[n] = F
                parent[n] = node
            else:
                F = h[n] + graph[node][n]+g
                if visited[n] >= F:
                    visited[n] = F
                    frontier[n] = F
                    parent[n] = node
                    

def traceback(parent, start, goal):
    path = [goal]
    while path[-1] != start:
        path.append(parent[path[-1]])
    path.reverse()
    return path


# Test Case 1
parent1 = A_star(graph, 'A', 'G', Heuristic)
path1 = traceback(parent1, 'A', 'G')
print("Path from A to G:", path1)

# Test Case 2
parent2 = A_star(graph2, 'A', 'H', Heuristic2)
path2 = traceback(parent2, 'A', 'H')
print("Path from A to H:", path2)




-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------


graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}

def ucs(graph, start, goal):
    p_q = [(0, start, [start])]
    visited = set()

    while p_q:
        p_q.sort(key=lambda x: x[0])
        cost, current, path = p_q.pop(0)

        if current == goal:
            return "Possible", path, cost

        if current in visited:
            continue
        visited.add(current)

        for neighbor, neighbor_cost in graph.get(current, []):
            if neighbor not in visited:
                p_q.append((cost + neighbor_cost, neighbor, path + [neighbor]))

    return "Impossible", [], float('inf')

start = input("Enter start node: ")
goal = input("Enter goal node: ")
result = ucs(graph, start, goal)
print(result[0])
if result[0] == "Possible":
    print("Path:", " -> ".join(result[1]))
    print("Cost:", result[2])


———————————————————————————————

graph ={
        'A': ['B', 'C', 'D'],
        'B': ['E', 'F'],
        'C': ['G', 'H'],
        'D': ['H'],
        'E': [],
        'F': [],
        'G': [],
        'H': []
    }

def bfs(graph, start, goal):
    visited = []
    queue = [start]

    while queue:
        current = queue.pop()
        if current == goal:
            return "Possible", visited + [goal]

        if current not in visited:
            visited.append(current)
            queue.extend(child for child in graph.get(current, []) if child not in visited)

    return "Impossible", visited

start = input("Enter the start node: ")
goal = input("Enter the goal node: ")

result, path = bfs(graph, start, goal)
print(result)
print(path)

---------------------------------------

def greedy_best_first_search(graph, start, goal, heuristic):
    frontier = [(heuristic[start], start)]
    visited = set()
    came_from = {}
    while frontier:
        frontier.sort()
        _, current = frontier.pop(0)
        if current == goal:
            path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return path[::-1]
        visited.add(current)
        for neighbor in graph.get(current, []):
            if neighbor not in visited:
                frontier.append((heuristic[neighbor], neighbor))
                visited.add(neighbor)
                came_from[neighbor] = current
    return None

if __name__ == "__main__":
    graph = {'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F', 'G'], 'D': [], 'E': ['H'], 'F': [], 'G': ['H'], 'H': []}
    heuristic = {'A': 6, 'B': 4, 'C': 5, 'D': 3, 'E': 2, 'F': 6, 'G': 1, 'H': 0}
    print(greedy_best_first_search(graph, 'A', 'H', heuristic))

